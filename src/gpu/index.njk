---
title: "GPUpgrade | GPU List"
---
{% extends "layouts/base.njk" %}

{% block content %}
<h1>GPU Performance List</h1>
<p>Complete list of GPUs with performance scores</p>

<div x-data="gpuList()" x-init="init()">

  <!-- Search and Filters -->
  <div style="background: #f8f9fa; padding: 20px; border-radius: 4px; margin-bottom: 30px;">

    <!-- Search -->
    <div style="margin-bottom: 20px;">
      <label><strong>Search GPUs:</strong></label><br>
      <input type="text" x-model="searchQuery" @input="filterGPUs()" placeholder="Search by name (RTX, RX, 4090...)"
        style="width: 400px; padding: 10px; border: 1px solid #ccc; border-radius: 4px;">
    </div>

    <!-- Brand Filter -->
    <div style="margin-bottom: 20px;">
      <label><strong>Brand:</strong></label><br>
      <label style="margin-right: 15px;">
        <input type="radio" x-model="brandFilter" value="all" @change="filterGPUs()" name="brand">
        All
      </label>
      <label style="margin-right: 15px;">
        <input type="radio" x-model="brandFilter" value="nvidia" @change="filterGPUs()" name="brand">
        NVIDIA
      </label>
      <label>
        <input type="radio" x-model="brandFilter" value="amd" @change="filterGPUs()" name="brand">
        AMD
      </label>
    </div>

    <!-- Sort Options -->
    <div style="margin-bottom: 20px;">
      <label><strong>Sort by:</strong></label><br>
      <select x-model="sortBy" @change="sortGPUs()" style="padding: 8px; border: 1px solid #ccc; border-radius: 4px;">
        <option value="name">Name (A-Z)</option>
        <option value="performance_4k">4K Performance</option>
        <option value="performance_1440p">1440p Performance</option>
        <option value="performance_1080p">1080p Performance</option>
      </select>
      <label style="margin-left: 15px;">
        <input type="checkbox" x-model="sortDescending" @change="sortGPUs()">
        Descending
      </label>
    </div>

    <!-- Results Count -->
    <div style="color: #666;">
      Showing <span x-text="filteredGPUs.length"></span> of <span x-text="allGPUs.length"></span> GPUs
    </div>
  </div>


  <!-- GPU Grid -->
  <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); gap: 20px;">
    <template x-for="gpu in filteredGPUs.slice(0, visibleCount)" :key="gpu.slug">
      <div style="border: 1px solid #ddd; padding: 20px; border-radius: 4px; background: white;">

        <!-- GPU Header -->
        <h3 style="margin: 0 0 5px 0;" x-text="gpu.name"></h3>

        <!-- Performance Score -->
        <div style="margin-bottom: 15px; font-size: 14px;">
          <strong>Performance Score:</strong>
          <span x-text="gpu.score"></span>
        </div>

        <!-- Performance Bar -->
        <div style="background: #e9ecef; height: 8px; border-radius: 4px; overflow: hidden; margin-bottom: 10px;">
          <div style="height: 100%; background: linear-gradient(90deg, #007bff, #28a745); border-radius: 4px;"
            :style="'width: ' + Math.min((gpu.performanceScore / maxPerformance * 100), 100) + '%'">
          </div>
        </div>

        <!-- Actions -->
        <div style="display: flex; gap: 10px;">
          <button @click="selectForComparison(gpu)"
            style="flex: 1; padding: 8px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer;">
            Add to Compare
          </button>
          <button @click="useInCalculator(gpu)"
            style="flex: 1; padding: 8px; background: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer;">
            Use in Calculator
          </button>
        </div>
      </div>
    </template>
  </div>

  <!-- Show more button -->
  <div x-show="filteredGPUs.length > visibleCount" style="text-align: center; margin-top: 20px;">
    <button @click="showMore()"
      style="padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer;">
      Show More GPUs
    </button>
  </div>
  <!-- No Results -->
  <div x-show="filteredGPUs.length === 0"
    style="text-align: center; padding: 40px; background: #f8f9fa; border-radius: 4px;">
    <h3>No GPUs found</h3>
    <p>Try adjusting your search or filter criteria.</p>
  </div>

  <!-- Comparison Bar (if GPUs selected) -->
  <div x-show="selectedForComparison.length > 0"
    style="position: fixed; bottom: 0; left: 0; right: 0; background: #343a40; color: white; padding: 15px; box-shadow: 0 -2px 10px rgba(0,0,0,0.1);">
    <div style="max-width: 1200px; margin: 0 auto; display: flex; justify-content: space-between; align-items: center;">
      <div>
        <strong>Selected for comparison:</strong>
        <span x-text="selectedForComparison.length"></span> GPU(s)
        <template x-for="gpu in selectedForComparison">
          <span style="margin-left: 10px; background: #007bff; padding: 4px 8px; border-radius: 3px; font-size: 12px;"
            x-text="gpu.name"></span>
        </template>
      </div>
      <div>
        <button @click="goToComparison()"
          style="background: #28a745; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; margin-right: 10px;">
          Compare Now
        </button>
        <button @click="clearComparison()"
          style="background: #dc3545; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">
          Clear All
        </button>
      </div>
    </div>
  </div>
</div>


<script>
  function gpuList() {
    return {
      allGPUs: [],
      filteredGPUs: [],
      searchQuery: '',
      brandFilter: 'all',
      sortBy: 'performanceScore',
      sortDescending: true,
      selectedForComparison: [],
      maxPerformance: 0,
      visibleCount: 20, // Limit fÃ¼r "Show More"


      init() {
        if (window.gpuData?.gpus) {
          this.allGPUs = Object.entries(window.gpuData.gpus).map(([slug, gpu]) => ({
            slug,
            name: gpu.name,
            score: gpu.score
          }));
          this.filteredGPUs = this.allGPUs;
        }
      },

      filterGPUs() {
        let filtered = [...this.allGPUs];

        // Textsuche
        if (this.searchQuery.length >= 1) {
          filtered = filtered.filter(gpu =>
            gpu.name.toLowerCase().includes(this.searchQuery.toLowerCase())
          );
        }

        // Brand-Filter
        if (this.brandFilter === 'nvidia') {
          filtered = filtered.filter(gpu =>
            gpu.name.toLowerCase().includes('rtx') ||
            gpu.name.toLowerCase().includes('gtx') ||
            gpu.name.toLowerCase().includes('geforce')
          );
        } else if (this.brandFilter === 'amd') {
          filtered = filtered.filter(gpu =>
            gpu.name.toLowerCase().includes('rx') ||
            gpu.name.toLowerCase().includes('radeon')
          );
        }

        this.filteredGPUs = filtered;
        this.sortGPUs();
      },

      sortGPUs() {
        this.filteredGPUs.sort((a, b) => {
          let aVal = a[this.sortBy];
          let bVal = b[this.sortBy];

          if (typeof aVal === 'string') {
            return this.sortDescending ? bVal.localeCompare(aVal) : aVal.localeCompare(bVal);
          }

          aVal = aVal || 0;
          bVal = bVal || 0;
          return this.sortDescending ? bVal - aVal : aVal - bVal;
        });
      },

      showMore() {
        this.visibleCount += 20;
      },

      selectForComparison(gpu) {
        const index = this.selectedForComparison.findIndex(selected => selected.slug === gpu.slug);

        if (index === -1) {
          if (this.selectedForComparison.length < 4) {
            this.selectedForComparison.push(gpu);
          } else {
            alert('You can compare up to 4 GPUs at once.');
          }
        } else {
          this.selectedForComparison.splice(index, 1);
        }
      },

      useInCalculator(gpu) {
        localStorage.setItem('selectedGPU', JSON.stringify(gpu));
        window.location.href = '/';
      },

      goToComparison() {
        if (this.selectedForComparison.length < 2) {
          alert('Please select at least 2 GPUs to compare.');
          return;
        }

        localStorage.setItem('comparisonGPUs', JSON.stringify(this.selectedForComparison));
        window.location.href = '/gpu/compare/';
      },

      clearComparison() {
        this.selectedForComparison = [];
      }
    };
  }
</script>
{% endblock %}
